
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009c8  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b3  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b0  00000000  00000000  000013ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  000018a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f0  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3c 00 	call	0x78	; 0x78 <main>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Bluetooth_Init>:
  6c:	0e 94 6f 00 	call	0xde	; 0xde <UART_Init>
  70:	08 95       	ret

00000072 <Bluetooth>:
  72:	0e 94 77 00 	call	0xee	; 0xee <UART_Receive>
  76:	08 95       	ret

00000078 <main>:
#include "BLUETOOTH.h"

int main(void)
{
	Uint8t data=0;
	Bluetooth_Init();
  78:	0e 94 36 00 	call	0x6c	; 0x6c <Bluetooth_Init>
	SPI_Init();
  7c:	0e 94 60 00 	call	0xc0	; 0xc0 <SPI_Init>
	SPI_SlaveSelect(0);
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_SlaveSelect>
	
	while (1) /*Super loop - Infinite loop*/
	{

		data=Bluetooth();
  86:	0e 94 39 00 	call	0x72	; 0x72 <Bluetooth>
		switch(data)
  8a:	82 36       	cpi	r24, 0x62	; 98
  8c:	69 f0       	breq	.+26     	; 0xa8 <main+0x30>
  8e:	18 f4       	brcc	.+6      	; 0x96 <main+0x1e>
  90:	81 36       	cpi	r24, 0x61	; 97
  92:	31 f0       	breq	.+12     	; 0xa0 <main+0x28>
  94:	f8 cf       	rjmp	.-16     	; 0x86 <main+0xe>
  96:	83 36       	cpi	r24, 0x63	; 99
  98:	59 f0       	breq	.+22     	; 0xb0 <main+0x38>
  9a:	84 36       	cpi	r24, 0x64	; 100
  9c:	69 f0       	breq	.+26     	; 0xb8 <main+0x40>
  9e:	f3 cf       	rjmp	.-26     	; 0x86 <main+0xe>
		{
			case 'a':
			
			SPI_Transmit('a');
  a0:	81 e6       	ldi	r24, 0x61	; 97
  a2:	0e 94 67 00 	call	0xce	; 0xce <SPI_Transmit>
			data=0;
			break;
  a6:	ef cf       	rjmp	.-34     	; 0x86 <main+0xe>
			
			case 'b':
			
			SPI_Transmit('b');
  a8:	82 e6       	ldi	r24, 0x62	; 98
  aa:	0e 94 67 00 	call	0xce	; 0xce <SPI_Transmit>
			data=0;
			break;
  ae:	eb cf       	rjmp	.-42     	; 0x86 <main+0xe>
			
			case 'c':
			
			SPI_Transmit('c');
  b0:	83 e6       	ldi	r24, 0x63	; 99
  b2:	0e 94 67 00 	call	0xce	; 0xce <SPI_Transmit>
			data=0;
			break;
  b6:	e7 cf       	rjmp	.-50     	; 0x86 <main+0xe>
			
			case 'd':
			
			
			SPI_Transmit('d');
  b8:	84 e6       	ldi	r24, 0x64	; 100
  ba:	0e 94 67 00 	call	0xce	; 0xce <SPI_Transmit>
			data=0;
			break;
  be:	e3 cf       	rjmp	.-58     	; 0x86 <main+0xe>

000000c0 <SPI_Init>:
  c0:	bd 9a       	sbi	0x17, 5	; 23
  c2:	be 98       	cbi	0x17, 6	; 23
  c4:	bf 9a       	sbi	0x17, 7	; 23
  c6:	bc 9a       	sbi	0x17, 4	; 23
  c8:	83 e5       	ldi	r24, 0x53	; 83
  ca:	8d b9       	out	0x0d, r24	; 13
  cc:	08 95       	ret

000000ce <SPI_Transmit>:
  ce:	8f b9       	out	0x0f, r24	; 15
  d0:	77 9b       	sbis	0x0e, 7	; 14
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <SPI_Transmit+0x2>
  d4:	08 95       	ret

000000d6 <SPI_SlaveSelect>:
  d6:	81 11       	cpse	r24, r1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <SPI_SlaveSelect+0x6>
  da:	c4 98       	cbi	0x18, 4	; 24
  dc:	08 95       	ret

000000de <UART_Init>:
  de:	88 e1       	ldi	r24, 0x18	; 24
  e0:	8a b9       	out	0x0a, r24	; 10
  e2:	86 e8       	ldi	r24, 0x86	; 134
  e4:	80 bd       	out	0x20, r24	; 32
  e6:	87 e6       	ldi	r24, 0x67	; 103
  e8:	89 b9       	out	0x09, r24	; 9
  ea:	10 bc       	out	0x20, r1	; 32
  ec:	08 95       	ret

000000ee <UART_Receive>:
  ee:	5f 9b       	sbis	0x0b, 7	; 11
  f0:	fe cf       	rjmp	.-4      	; 0xee <UART_Receive>
  f2:	8c b1       	in	r24, 0x0c	; 12
  f4:	08 95       	ret

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
